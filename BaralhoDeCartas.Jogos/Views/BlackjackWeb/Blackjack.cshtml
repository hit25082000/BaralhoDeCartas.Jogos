@model BaralhoDeCartas.Models.Interfaces.IJogoBlackJack
@{
    ViewData["Title"] = "Blackjack";
    Layout = "_Layout";
}

<link rel="stylesheet" href="~/css/jogo.css" />

<div class="container py-5">
    <div class="row justify-content-center mb-4">
        <div class="col-lg-10 text-center">
            <h1 class="display-4 fw-bold mb-4 animate__animated animate__fadeInDown">Blackjack</h1>
            <p class="lead text-muted animate__animated animate__fadeInUp">Chegue o mais próximo de 21 sem ultrapassar!</p>
        </div>
    </div>

    <div class="row justify-content-center mb-3">
        <div class="col-lg-10">
            <div class="info-baralho card shadow-sm mb-4">
                <div class="card-body p-3">
                    <div class="jogadores-info d-flex justify-content-between align-items-center">
                        <p class="mb-0">ID do Baralho: <span class="badge bg-secondary">@Model.Baralho.BaralhoId</span></p>
                        <p class="mb-0">Cartas Restantes: <span class="badge bg-info" id="cartas-restantes">@Model.Baralho.QuantidadeDeCartasRestantes</span></p>
                        <p class="mb-0">Status: <span class="badge @(Model.Baralho.EstaEmbaralhado ? "bg-success" : "bg-warning")">
                            @(Model.Baralho.EstaEmbaralhado ? "Embaralhado" : "Não Embaralhado")
                        </span></p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row justify-content-center mb-5">
        <div class="col-lg-10">
            <div class="card shadow-sm">
                <div class="card-body p-4">
                    <div class="row mb-4">
                        <div class="col-md-6 text-center mb-4 mb-md-0">
                            <h3 class="mb-3">Dealer</h3>
                            <div id="dealer-cards" class="cards-container d-flex justify-content-center flex-wrap"></div>
                            <div class="score-display mt-3">
                                <span>Pontos: </span>
                                <span id="dealer-score">0</span>
                            </div>
                        </div>
                        <div class="col-md-6 text-center">
                            <h3 class="mb-3">Você</h3>
                            <div id="player-cards" class="cards-container d-flex justify-content-center flex-wrap"></div>
                            <div class="score-display mt-3">
                                <span>Pontos: </span>
                                <span id="player-score">0</span>
                            </div>
                        </div>
                    </div>

                    <div class="d-flex justify-content-center mb-4">
                        <div id="game-message" class="alert alert-info text-center w-100">
                            Clique em "Iniciar" para começar um novo jogo!
                        </div>
                    </div>

                    <div class="text-center mb-4">
                        <div id="control-buttons">
                            <button id="start-btn" class="btn btn-primary btn-lg me-2" onclick="iniciarRodada()">
                                <i class="bi bi-play-circle me-2"></i>Iniciar
                            </button>
                            <button id="hit-btn" class="btn btn-success btn-lg me-2" disabled onclick="comprarCarta(2)">
                                <i class="bi bi-plus-circle me-2"></i>Pedir Carta
                            </button>
                            <button id="stand-btn" class="btn btn-warning btn-lg" disabled onclick="parar(2)">
                                <i class="bi bi-hand-thumbs-up me-2"></i>Parar
                            </button>
                        </div>
                    </div>

                    <div class="text-center">
                        <button id="new-game-btn" class="btn btn-outline-secondary btn-lg" disabled onclick="novoJogo()">
                            <i class="bi bi-arrow-repeat me-2"></i>Novo Jogo
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="card shadow-sm">
                <div class="card-body p-4">
                    <h4 class="card-title mb-3">Regras do Blackjack</h4>
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item">O objetivo é ter uma mão com valor mais próximo de 21 sem ultrapassar</li>
                        <li class="list-group-item">Cartas numéricas (2-10) valem seu valor nominal</li>
                        <li class="list-group-item">Figuras (J, Q, K) valem 10 pontos</li>
                        <li class="list-group-item">Áses podem valer 1 ou 11 pontos (o que for melhor para a mão)</li>
                        <li class="list-group-item">Você começa com 2 cartas e pode pedir mais ("hit") ou parar ("stand")</li>
                        <li class="list-group-item">Se ultrapassar 21, você perde automaticamente ("bust")</li>
                        <li class="list-group-item">O dealer deve pedir cartas até ter pelo menos 17 pontos</li>
                        <li class="list-group-item">Blackjack natural (21 com as primeiras 2 cartas) vence automaticamente</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Variáveis globais do jogo
        const baralhoId = "@Model.Baralho.BaralhoId";
        let jogadoresInfo = [];
        let dealerInfo = null;
        let jogadorInfo = null;
        let jogoEmAndamento = false;
        let cartasRestantes = @Model.Baralho.QuantidadeDeCartasRestantes;
        
        // Elementos do DOM
        const dealerCards = document.getElementById('dealer-cards');
        const playerCards = document.getElementById('player-cards');
        const dealerScore = document.getElementById('dealer-score');
        const playerScore = document.getElementById('player-score');
        const gameMessage = document.getElementById('game-message');
        const startBtn = document.getElementById('start-btn');
        const hitBtn = document.getElementById('hit-btn');
        const standBtn = document.getElementById('stand-btn');
        const newGameBtn = document.getElementById('new-game-btn');
        const cartasRestantesEl = document.getElementById('cartas-restantes');

        // Função para criar um elemento de carta visualmente
        function criarElementoCarta(carta, viradaParaCima = true) {
            const cartaElement = document.createElement('div');
            cartaElement.className = 'playing-card';
            
            if (viradaParaCima) {
                cartaElement.innerHTML = `
                    <div class="card-visual" style="background-color: white; width: 80px; height: 120px; border-radius: 5px; margin: 5px; box-shadow: 0 2px 5px rgba(0,0,0,0.2); display: flex; justify-content: center; align-items: center; position: relative;">
                        <div class="card-valor" style="font-size: 24px; position: absolute; top: 5px; left: 5px;">${carta.valor}</div>
                        <div class="card-naipe" style="font-size: 30px; color: ${carta.naipe === '♥' || carta.naipe === '♦' ? 'red' : 'black'};">${carta.naipe}</div>
                        <div class="card-valor-bottom" style="font-size: 24px; position: absolute; bottom: 5px; right: 5px; transform: rotate(180deg);">${carta.valor}</div>
                    </div>
                `;
            } else {
                cartaElement.innerHTML = `
                    <div class="card-back" style="background-color: #7b1fa2; width: 80px; height: 120px; border-radius: 5px; margin: 5px; box-shadow: 0 2px 5px rgba(0,0,0,0.2); display: flex; justify-content: center; align-items: center; background-image: repeating-linear-gradient(45deg, #6e1b9a 0, #6e1b9a 10px, #7b1fa2 10px, #7b1fa2 20px);">
                    </div>
                `;
            }
            
            return cartaElement;
        }

        // Função para limpar as áreas de cartas
        function limparCartas() {
            dealerCards.innerHTML = '';
            playerCards.innerHTML = '';
        }

        // Função para atualizar o contador de cartas restantes
        function atualizarCartasRestantes(valor) {
            cartasRestantes = valor;
            cartasRestantesEl.textContent = valor;
        }

        // Função para iniciar uma nova rodada
        async function iniciarRodada() {
            try {
                limparCartas();
                
                const response = await fetch(`/BlackjackWeb/IniciarRodada?baralhoId=${baralhoId}&numeroJogadores=2`);
                if (!response.ok) {
                    throw new Error('Erro ao iniciar rodada');
                }
                
                jogadoresInfo = await response.json();
                
                // O primeiro jogador (índice 0) é o dealer
                dealerInfo = jogadoresInfo.find(j => j.nome === "Dealer");
                jogadorInfo = jogadoresInfo.find(j => j.nome === "Jogador");
                
                if (!dealerInfo || !jogadorInfo) {
                    throw new Error('Erro ao identificar jogadores');
                }
                
                // Atualizar o estado do jogo
                jogoEmAndamento = true;
                
                // Mostrar as cartas do dealer (primeira carta virada para baixo)
                dealerInfo.cartas.forEach((carta, index) => {
                    dealerCards.appendChild(criarElementoCarta(carta, index > 0));
                });
                
                // Mostrar as cartas do jogador
                jogadorInfo.cartas.forEach(carta => {
                    playerCards.appendChild(criarElementoCarta(carta));
                });
                
                // Atualizar a pontuação do jogador
                const pontuacaoJogador = calcularPontuacao(jogadorInfo.cartas);
                playerScore.textContent = pontuacaoJogador;
                
                // Esconder a pontuação do dealer (apenas mostrar a segunda carta)
                dealerScore.textContent = '?';
                
                // Atualizar mensagem e botões
                gameMessage.textContent = 'Sua vez de jogar!';
                gameMessage.className = 'alert alert-info text-center w-100';
                
                startBtn.disabled = true;
                hitBtn.disabled = false;
                standBtn.disabled = false;
                newGameBtn.disabled = false;
                
                // Atualizar cartas restantes
                atualizarCartasRestantes(cartasRestantes - 4); // 4 cartas foram distribuídas (2 para cada jogador)
                
                // Verificar se o jogador já tem blackjack
                if (pontuacaoJogador === 21) {
                    await parar(jogadorInfo.id);
                }
                
            } catch (error) {
                console.error('Erro ao iniciar rodada:', error);
                gameMessage.textContent = 'Erro ao iniciar rodada. Tente novamente.';
                gameMessage.className = 'alert alert-danger text-center w-100';
            }
        }
        
        // Função para calcular a pontuação de uma mão
        function calcularPontuacao(cartas) {
            let pontos = 0;
            let ases = 0;
            
            cartas.forEach(carta => {
                if (['J', 'Q', 'K'].includes(carta.valor)) {
                    pontos += 10;
                } else if (carta.valor === 'A') {
                    pontos += 11;
                    ases++;
                } else {
                    pontos += parseInt(carta.valor);
                }
            });
            
            // Ajustar valor dos ases se necessário
            while (pontos > 21 && ases > 0) {
                pontos -= 10;
                ases--;
            }
            
            return pontos;
        }
        
        // Função para o jogador comprar uma carta
        async function comprarCarta(jogadorId) {
            if (!jogoEmAndamento) return;
            
            try {
                const response = await fetch(`/BlackjackWeb/ComprarCarta?baralhoId=${baralhoId}&jogadorId=${jogadorId}`);
                if (!response.ok) {
                    throw new Error('Erro ao comprar carta');
                }
                
                const resultado = await response.json();
                
                // Atualizar as informações do jogador
                jogadorInfo = resultado;
                
                // Adicionar a nova carta à interface
                const novaCarta = jogadorInfo.cartas[jogadorInfo.cartas.length - 1];
                playerCards.appendChild(criarElementoCarta(novaCarta));
                
                // Atualizar a pontuação
                playerScore.textContent = jogadorInfo.pontos;
                
                // Atualizar cartas restantes
                atualizarCartasRestantes(cartasRestantes - 1);
                
                // Verificar se o jogador estourou
                if (jogadorInfo.estourou) {
                    gameMessage.textContent = 'Você estourou! Dealer vence.';
                    gameMessage.className = 'alert alert-danger text-center w-100';
                    await finalizarJogo('dealer');
                }
                
                // Verificar se o jogador atingiu 21
                if (jogadorInfo.pontos === 21) {
                    await parar(jogadorId);
                }
                
            } catch (error) {
                console.error('Erro ao comprar carta:', error);
                gameMessage.textContent = 'Erro ao comprar carta. Tente novamente.';
                gameMessage.className = 'alert alert-danger text-center w-100';
            }
        }
        
        // Função para o jogador parar
        async function parar(jogadorId) {
            if (!jogoEmAndamento) return;
            
            try {
                // Desabilitar botões durante a jogada do dealer
                hitBtn.disabled = true;
                standBtn.disabled = true;
                
                // Marcar que o jogador parou
                const paraResponse = await fetch(`/BlackjackWeb/Parar?baralhoId=${baralhoId}&jogadorId=${jogadorId}`);
                if (!paraResponse.ok) {
                    throw new Error('Erro ao parar jogada');
                }
                
                // Revelar todas as cartas do dealer
                dealerCards.innerHTML = '';
                dealerInfo.cartas.forEach(carta => {
                    dealerCards.appendChild(criarElementoCarta(carta, true));
                });
                
                // Agora, fazer o dealer jogar
                const dealerResponse = await fetch(`/BlackjackWeb/DealerJogar?baralhoId=${baralhoId}`);
                if (!dealerResponse.ok) {
                    throw new Error('Erro na jogada do dealer');
                }
                
                const resultadoDealer = await dealerResponse.json();
                
                // Atualizar cartas e pontuação do dealer
                dealerCards.innerHTML = '';
                resultadoDealer.dealer.cartas.forEach(carta => {
                    dealerCards.appendChild(criarElementoCarta(carta, true));
                });
                dealerScore.textContent = resultadoDealer.dealer.pontos;
                
                // Atualizar cartas restantes (contar quantas cartas o dealer pegou adicionalmente)
                const cartasAdicionaisDealer = resultadoDealer.dealer.cartas.length - dealerInfo.cartas.length;
                atualizarCartasRestantes(cartasRestantes - cartasAdicionaisDealer);
                
                // Determinar o vencedor
                await finalizarJogo(resultadoDealer.vencedor);
                
            } catch (error) {
                console.error('Erro ao parar:', error);
                gameMessage.textContent = 'Erro ao finalizar jogada. Tente novamente.';
                gameMessage.className = 'alert alert-danger text-center w-100';
            }
        }
        
        // Função para finalizar o jogo e mostrar o resultado
        async function finalizarJogo(vencedor) {
            jogoEmAndamento = false;
            hitBtn.disabled = true;
            standBtn.disabled = true;
            newGameBtn.disabled = false;
            
            // Determinar mensagem e estilo baseado no vencedor
            let mensagem = '';
            let estilo = '';
            
            switch(vencedor) {
                case 'player':
                    mensagem = 'Você venceu!';
                    estilo = 'alert-success';
                    break;
                case 'dealer':
                    mensagem = 'Dealer venceu!';
                    estilo = 'alert-danger';
                    break;
                case 'empate':
                    mensagem = 'Empate!';
                    estilo = 'alert-warning';
                    break;
            }
            
            gameMessage.textContent = mensagem;
            gameMessage.className = `alert ${estilo} text-center w-100`;
        }
        
        // Função para iniciar um novo jogo
        async function novoJogo() {
            try {
                // Finalizar o jogo atual e retornar todas as cartas ao baralho
                const response = await fetch(`/BlackjackWeb/FinalizarJogo?baralhoId=${baralhoId}`, {
                    method: 'POST'
                });
                
                if (!response.ok) {
                    throw new Error('Erro ao finalizar jogo');
                }
                
                // Resetar o estado do jogo
                limparCartas();
                dealerScore.textContent = '0';
                playerScore.textContent = '0';
                
                gameMessage.textContent = 'Clique em "Iniciar" para começar um novo jogo!';
                gameMessage.className = 'alert alert-info text-center w-100';
                
                startBtn.disabled = false;
                hitBtn.disabled = true;
                standBtn.disabled = true;
                newGameBtn.disabled = true;
                
                jogadoresInfo = [];
                dealerInfo = null;
                jogadorInfo = null;
                jogoEmAndamento = false;
                
                // Resetar o contador de cartas
                atualizarCartasRestantes(52);
                
            } catch (error) {
                console.error('Erro ao iniciar novo jogo:', error);
                gameMessage.textContent = 'Erro ao iniciar novo jogo. Tente novamente.';
                gameMessage.className = 'alert alert-danger text-center w-100';
            }
        }
    </script>
} 